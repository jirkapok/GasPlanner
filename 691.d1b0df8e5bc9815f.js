"use strict";(self.webpackChunkplanner=self.webpackChunkplanner||[]).push([[691],{211:(J,K,R)=>{R.d(K,{e:()=>w});var m=R(277);class w{static toTanks(o){const u=[];return o.forEach(p=>{const f=new m.VQ(p.size,p.startPressure,0);f.id=p.id,f.gas.fO2=p.gas.fO2,f.gas.fHe=p.gas.fHe,u.push(f)}),m.bz.renumberIds(u),u}static loadWorkingPressure(o,u){for(let p=0;p<u.length;p++)u[p].workingPressureBars=o[p].workPressure}static fromTanks(o){const u=[];return o.forEach(p=>{const f=p.tank,v={id:f.id,size:f.size,workPressure:p.workingPressureBars,startPressure:f.startPressure,gas:w.fromGas(f.gas)};u.push(v)}),u}static toConsumed(o){const u=[];for(let p=0;p<o.length;p++){const f=o[p];u.push({id:f.id,consumed:f.consumed,reserve:f.reserve})}return u}static toSegments(o,u){const p=[];for(let f=0;f<o.length;f++){const v=o[f],N=w.toGas(v.gas),C=new m.XX(v.startDepth,v.endDepth,N,v.duration);v.tankId>0&&v.tankId<=u.length&&(C.tank=u[v.tankId-1]),p.push(C)}return p}static fromSegments(o){const u=[];return o.forEach(p=>{const v={startDepth:p.startDepth,endDepth:p.endDepth,duration:p.duration,tankId:p.tank?p.tank.id:0,gas:w.fromGas(p.gas)};u.push(v)}),u}static toProfile(o,u){const p=w.toSegments(o.segments,u);return m.Z1.fromProfile(p,o.ceilings)}static fromProfile(o){return{segments:w.fromSegments(o.segments),ceilings:o.ceilings,errors:w.fromEvents(o.errors)}}static toEvents(o){const u=new m.zW;return o.forEach(p=>{const f=m.ju.create(p.type,p.timeStamp,p.depth);f.message=p.message,p.gas&&(f.gas=w.toGas(p.gas)),u.add(f)}),u}static fromEvents(o){const u=[];return o.forEach(p=>{const f={timeStamp:p.timeStamp,depth:p.depth,type:p.type,message:p.message};p.gas&&(f.gas=w.fromGas(p.gas)),u.push(f)}),u}static fromDiver(o){return{rmv:o.rmv,maxPpO2:o.maxPpO2,maxDecoPpO2:o.maxDecoPpO2}}static toDiver(o){const u=new m.rr(o.rmv,o.maxPpO2);return u.maxDecoPpO2=o.maxDecoPpO2,u}static fromOptions(o){return{gfLow:o.gfLow,gfHigh:o.gfHigh,maxPpO2:o.maxPpO2,maxDecoPpO2:o.maxDecoPpO2,salinity:o.salinity,altitude:o.altitude,roundStopsToMinutes:o.roundStopsToMinutes,gasSwitchDuration:o.gasSwitchDuration,safetyStop:o.safetyStop,lastStopDepth:o.lastStopDepth,decoStopDistance:o.decoStopDistance,minimumAutoStopDepth:o.minimumAutoStopDepth,maxEND:o.maxEND,oxygenNarcotic:o.oxygenNarcotic,ascentSpeed6m:o.ascentSpeed6m,ascentSpeed50percTo6m:o.ascentSpeed50percTo6m,ascentSpeed50perc:o.ascentSpeed50perc,descentSpeed:o.descentSpeed,problemSolvingDuration:o.problemSolvingDuration}}static toOptions(o){const u=new m.Ei(o.gfLow,o.gfHigh,o.maxPpO2,o.maxDecoPpO2,o.salinity);return u.altitude=o.altitude,u.roundStopsToMinutes=o.roundStopsToMinutes,u.gasSwitchDuration=o.gasSwitchDuration,u.safetyStop=o.safetyStop,u.lastStopDepth=o.lastStopDepth,u.decoStopDistance=o.decoStopDistance,u.minimumAutoStopDepth=o.minimumAutoStopDepth,u.maxEND=o.maxEND,u.oxygenNarcotic=o.oxygenNarcotic,u.ascentSpeed6m=o.ascentSpeed6m,u.ascentSpeed50percTo6m=o.ascentSpeed50percTo6m,u.ascentSpeed50perc=o.ascentSpeed50perc,u.descentSpeed=o.descentSpeed,u.problemSolvingDuration=o.problemSolvingDuration,u}static fromDensity(o){return{gas:w.fromGas(o.gas),depth:o.depth,density:o.density}}static toDensity(o){const u=w.toGas(o.gas);return new m.kf(u,o.depth,o.density)}static toGas(o){return new m.RP(o.fO2,o.fHe)}static fromGas(o){return{fO2:o.fO2,fHe:o.fHe}}}},691:(J,K,R)=>{R.d(K,{P:()=>g});var m=R(277),w=R(211);class g{static calculateDecompression(u){const p=w.e.toTanks(u.tanks),f=w.e.toSegments(u.plan,p),v=m.wC.fromCollection(f),N=m.Vw.fromTanks(p),C=new m.dD,M=w.e.toOptions(u.options),c=C.calculateDecompression(M,N,v),L=w.e.fromProfile(c),T=m.uv.fromProfile({maxDensity:u.eventOptions.maxDensity,startAscentIndex:v.startAscentIndex,profile:c.segments,ceilings:c.ceilings,profileOptions:M});return{profile:L,events:w.e.fromEvents(T.items)}}static diveInfo(u){const p=w.e.toTanks(u.tanks),f=m.Vw.fromTanks(p),v=w.e.toSegments(u.plan,p),N=m.wC.fromCollection(v),C=new m.dD,M=w.e.toOptions(u.options),c=C.noDecoLimitMultiLevel(N,f,M),L=new m.FQ(u.options).create(),F=new m.Uz(L).calculateForProfile(v),T=new m.rQ(L).calculateForProfile(v),x=new m.E1(L).forProfile(v);return{noDeco:c,otu:F,cns:T,density:w.e.fromDensity(x)}}static calculateConsumption(u){const p=new m.FQ(u.options).create(),f=new m.Cb(p),v=w.e.toTanks(u.tanks),N=w.e.toSegments(u.profile,v),C=w.e.toSegments(u.plan,v),M=m.wC.fromCollection(C),c=new m.rr(u.diver.rmv,u.options.maxPpO2),L=w.e.toOptions(u.options),F=f.calculateMaxBottomTime(M,v,c,L),T=f.emergencyAscent(N,L,v);let x=m.wC.duration(T);return x=m.qp.toMinutes(x),f.consumeFromTanks2(N,T,L,v,c),{maxTime:F,timeToSurface:x,tanks:w.e.toConsumed(v)}}}},277:(J,K,R)=>{R.d(K,{Cb:()=>dt,E1:()=>it,Ei:()=>L,FQ:()=>N,RP:()=>O,Uz:()=>gt,VQ:()=>X,Vw:()=>z,XX:()=>B,Z1:()=>V,bz:()=>Q,dD:()=>U,ju:()=>x,kf:()=>Y,qp:()=>D,rQ:()=>pt,rr:()=>lt,uv:()=>j,wC:()=>H,zW:()=>tt});class m{constructor(t,e,s,r,n,a){this._n2HalfTime=t,this._n2A=e,this._n2B=s,this._heHalfTime=r,this._heA=n,this._heB=a}get n2HalfTime(){return this._n2HalfTime}get n2A(){return this._n2A}get n2B(){return this._n2B}get heHalfTime(){return this._heHalfTime}get heA(){return this._heA}get heB(){return this._heB}}class w{}w.Buhlmann_ZHL16C=[new m(5,1.1696,.5578,1.88,1.6189,.477),new m(8,1,.6514,3.02,1.383,.5747),new m(12.5,.8618,.7222,4.72,1.1919,.6527),new m(18.5,.7562,.7826,6.99,1.0458,.7223),new m(27,.62,.8125,10.21,.922,.7582),new m(38.3,.5043,.8434,14.48,.8205,.7957),new m(54.3,.441,.8693,20.53,.7305,.8279),new m(77,.4,.891,29.11,.6502,.8553),new m(109,.375,.9092,41.2,.595,.8757),new m(146,.35,.9222,55.19,.5545,.8903),new m(187,.3295,.9319,70.69,.5333,.8997),new m(239,.3065,.9403,90.34,.5189,.9073),new m(305,.2835,.9477,115.29,.5181,.9122),new m(390,.261,.9544,147.42,.5176,.9171),new m(498,.248,.9602,188.24,.5172,.9217),new m(635,.2327,.9653,240.03,.5119,.9267)];class g{static fix(t){return Number(t.toFixed(10))}static roundTwoDecimals(t){return g.round(t,2)}static round(t,e=0){return g.adapt(Math.round,t,e)}static floorTwoDecimals(t){return g.floor(t,2)}static floor(t,e=0){return g.adapt(Math.floor,t,e)}static ceilTwoDecimals(t){return g.ceil(t,2)}static ceil(t,e=0){return g.adapt(Math.ceil,t,e)}static ceilDistance(t,e){return g.adaptDistance(Math.ceil,t,e)}static roundDistance(t,e){return g.adaptDistance(Math.round,t,e)}static floorDistance(t,e){return g.adaptDistance(Math.floor,t,e)}static adapt(t,e,s){const r=Math.pow(10,s);return t(e*r)/r}static adaptDistance(t,e,s){return t(e/s)*s}}var o=(()=>{return(i=o||(o={}))[i.fresh=1]="fresh",i[i.brackish=2]="brackish",i[i.salt=3]="salt",o;var i})();let u=(()=>{class i{}return i.fresh=1e3,i.brackish=1020,i.salt=1030,i})(),p=(()=>{class i{}return i.standard=9.80665,i})(),f=(()=>{class i{static pascalToBar(e){return e/i.coefficient}static barToPascal(e){return e*i.coefficient}}return i.coefficient=1e5,i})(),v=(()=>{class i{static atAltitude(e){return f.barToPascal(this.standard)*Math.pow(288.15/(288.15+-.0065*e),.0289644*p.standard/-.05404308)}}return i.standard=1.01325,i})();class N{constructor(t){this.options=t}create(){switch(this.options.salinity){case o.salt:return C.forSaltWater(this.options.altitude);case o.brackish:return C.forBrackishWater(this.options.altitude);default:return C.forFreshWater(this.options.altitude)}}}class C{constructor(t,e){this.density=t,this._gravity=p.standard;const s=v.atAltitude(e);this._surfacePressure=f.pascalToBar(s)}get surfacePressure(){return this._surfacePressure}static forSaltWater(t=0){return new C(u.salt,t)}static forBrackishWater(t=0){return new C(u.brackish,t)}static forFreshWater(t=0){return new C(u.fresh,t)}static simple(){const t=new C(u.fresh,0);return t._surfacePressure=1,t._gravity=10,t}toBar(t){return f.pascalToBar(t*(this.density*this._gravity))+this._surfacePressure}fromBar(t){if(t<this._surfacePressure)throw new Error("Lower pressure than altitude isn`t convertible to depth.");const e=this.density*this._gravity;return f.barToPascal(t-this._surfacePressure)/e}}var M=(()=>{return(i=M||(M={}))[i.never=1]="never",i[i.auto=2]="auto",i[i.always=3]="always",M;var i})();class c{static setMediumConservatism(t){t.gfLow=c.gfLow,t.gfHigh=c.gfHigh}static useGeneralRecommended(t){t.safetyStop=c.safetyStopRecre,t.roundStopsToMinutes=c.roundStopsToMinutes,t.gasSwitchDuration=c.gasSwitchDuration,t.oxygenNarcotic=c.oxygenNarcotic}}c.altitude=0,c.saltWater=o.salt,c.roundStopsToMinutes=!1,c.gasSwitchDuration=2,c.problemSolvingDuration=1,c.lastStopDepth=3,c.lastStopDepthRecre=5,c.safetyStopRecre=M.auto,c.decoStopDistance=3,c.minimumAutoStopDepth=10,c.addSafetyStop=!0,c.maxEND=30,c.oxygenNarcotic=!0,c.ascentSpeed6m=3,c.ascentSpeed50percTo6m=6,c.ascentSpeed50perc=9,c.descentSpeed=18,c.gfLow=.4,c.gfHigh=.85,c.maxPpO2=1.4,c.maxDecoPpO2=1.6;class L{constructor(t=c.gfLow,e=c.gfHigh,s=c.maxPpO2,r=c.maxDecoPpO2,n=c.saltWater){this.gfLow=t,this.gfHigh=e,this.maxPpO2=s,this.maxDecoPpO2=r,this.salinity=n,this.altitude=c.altitude,this.roundStopsToMinutes=c.roundStopsToMinutes,this.gasSwitchDuration=c.gasSwitchDuration,this.safetyStop=c.safetyStopRecre,this.lastStopDepth=c.lastStopDepth,this.decoStopDistance=c.decoStopDistance,this.minimumAutoStopDepth=c.minimumAutoStopDepth,this.maxEND=c.maxEND,this.oxygenNarcotic=!0,this.ascentSpeed6m=c.ascentSpeed6m,this.ascentSpeed50percTo6m=c.ascentSpeed50percTo6m,this.ascentSpeed50perc=c.ascentSpeed50perc,this.descentSpeed=c.descentSpeed,this.problemSolvingDuration=c.problemSolvingDuration,this.gfLow=t||c.gfLow,this.gfHigh=e||c.gfHigh,this.maxPpO2=s||c.maxPpO2,this.maxDecoPpO2=r||c.maxDecoPpO2,this.salinity=n||c.saltWater}loadFrom(t){this.gfLow=t.gfLow||this.gfLow,this.gfHigh=t.gfHigh||this.gfHigh,this.maxPpO2=t.maxPpO2||this.maxPpO2,this.maxDecoPpO2=t.maxDecoPpO2||this.maxDecoPpO2,this.oxygenNarcotic=!!t.oxygenNarcotic,this.salinity=t.salinity||this.salinity,this.altitude=t.altitude||0===t.altitude?t.altitude:this.altitude,this.roundStopsToMinutes=!!t.roundStopsToMinutes,this.gasSwitchDuration=t.gasSwitchDuration||this.gasSwitchDuration,this.problemSolvingDuration=t.problemSolvingDuration||this.problemSolvingDuration,this.lastStopDepth=t.lastStopDepth||this.lastStopDepth,this.decoStopDistance=t.decoStopDistance||this.decoStopDistance,this.minimumAutoStopDepth=t.minimumAutoStopDepth||this.minimumAutoStopDepth,this.safetyStop=t.safetyStop||this.safetyStop,this.maxEND=t.maxEND||this.maxEND,this.ascentSpeed6m=t.ascentSpeed6m||this.ascentSpeed6m,this.ascentSpeed50percTo6m=t.ascentSpeed50percTo6m||this.ascentSpeed50percTo6m,this.ascentSpeed50perc=t.ascentSpeed50perc||this.ascentSpeed50perc,this.descentSpeed=t.descentSpeed||this.descentSpeed}}class F{constructor(t,e){this.depthConverter=t,this.options=e}toDecoStop(t){const e=this.depthConverter.fromBar(t);return g.roundDistance(e,this.options.decoStopDistance)}nextStop(t){if(t<=this.options.lastStopDepth)return 0;const e=g.floorDistance(t,this.options.decoStopDistance);if(e!==t)return e;const s=t-this.options.decoStopDistance;return s<=this.options.lastStopDepth?this.options.lastStopDepth:s}addSafetyStop(t,e){return(this.options.safetyStop===M.always||this.options.safetyStop===M.auto&&e>this.options.minimumAutoStopDepth)&&t===this.options.lastStopDepth}}var T=(()=>{return(i=T||(T={}))[i.noAction=0]="noAction",i[i.error=1]="error",i[i.gasSwitch=2]="gasSwitch",i[i.reachedNoDeco=3]="reachedNoDeco",i[i.lowPpO2=4]="lowPpO2",i[i.highPpO2=5]="highPpO2",i[i.highAscentSpeed=6]="highAscentSpeed",i[i.highDescentSpeed=7]="highDescentSpeed",i[i.brokenCeiling=8]="brokenCeiling",i[i.maxEndExceeded=9]="maxEndExceeded",i[i.switchToHigherN2=10]="switchToHigherN2",i[i.highGasDensity=11]="highGasDensity",T;var i})();class x{constructor(t,e,s,r,n){this.timeStamp=t,this.depth=e,this.type=s,this.message=r,this.gas=n}static create(t,e,s,r){return new x(e,s,t,"",r)}static createError(t){return new x(0,0,T.error,t)}}class k{static createError(t){return x.createError(t)}static createGasSwitch(t,e,s){return x.create(T.gasSwitch,t,e,s)}static createLowPpO2(t,e){return x.create(T.lowPpO2,t,e)}static createHighPpO2(t,e){return x.create(T.highPpO2,t,e)}static createHighAscentSpeed(t,e){return x.create(T.highAscentSpeed,t,e)}static createHighDescentSpeed(t,e){return x.create(T.highDescentSpeed,t,e)}static createBrokenCeiling(t,e){return x.create(T.brokenCeiling,t,e)}static createMaxEndExceeded(t,e,s){return x.create(T.maxEndExceeded,t,e,s)}static createSwitchToHigherN2(t,e,s){return x.create(T.switchToHigherN2,t,e,s)}static createHighDensity(t,e,s){return x.create(T.highGasDensity,t,e,s)}}class tt{constructor(){this.items=[]}add(t){this.items.push(t)}}class ot{constructor(t,e){this.time=t,this.depth=e}get notAtSurface(){return this.depth>0}static isDecoDive(t){for(const e of t)if(e.notAtSurface)return!0;return!1}}class V{constructor(t,e,s){this.seg=t,this.ceil=e,this.err=s}get segments(){return this.seg}get ceilings(){return this.ceil}get errors(){return this.err}static fromErrors(t,e){return new V(t,[],e)}static fromProfile(t,e){return new V(t,e,[])}}class ct{static validate(t,e,s){const r=[];if(!t.hasBottomGas){const n=k.createError("At least one bottom gas has to be defined.");return r.push(n),r}return r}}class ht{constructor(t,e){this.gases=t,this.depthConverter=C.simple(),this.depthLevels=new F(this.depthConverter,e)}bestGas(t){const e=this.depthConverter.toBar(t.currentDepth),s=this.depthConverter.toBar(t.maxEnd);let r=t.currentGas;return this.gases.all.forEach(n=>{const a=n.mod(t.maxDecoPpO2),h=this.depthLevels.toDecoStop(a),d=n.end(e,t.oxygenNarcotic);t.currentDepth<=h&&d<=s&&(!r||r.fO2<n.fO2)&&(r=n)}),r}}class z{constructor(){this.bottomGases=[]}get all(){return this.bottomGases.slice()}get hasBottomGas(){return this.bottomGases.length>=1}static fromTanks(t){const e=new z;return t.forEach(s=>{e.add(s.gas)}),e}add(t){this.bottomGases.push(t)}isRegistered(t){return this.bottomGases.includes(t)}}class G{static partialPressure(t,e){return t*e}static mod(t,e){return t/e}static bestMix(t,e,s){const n=t/s.toBar(e);return n>1?1:n}static ead(t,e,s=l.o2InAir){const n=1-s;return G.end(e,1-t)/n}static end(t,e,s=0){return t*this.narcoticIndex(s,e)}static mnd(t,e,s=0){return t/this.narcoticIndex(s,e)}static ceiling(t,e){const n=.18/t*e;return n<e?e:n}static narcoticIndex(t,e=0){return e+t}}class O{constructor(t,e){if(this._fO2=t,this._fHe=e,this.contentExceeds100percent())throw new Error("O2 + He can't exceed 100 %")}get fN2(){return 1-this._fO2-this._fHe}get fO2(){return this._fO2}get fHe(){return this._fHe}get name(){return l.nameFor(this.fO2,this.fHe)}set fO2(t){this._fO2=t>1?1:t,this.contentExceeds100percent()&&(this._fHe=this.countRemaining(this._fO2))}set fHe(t){this._fHe=t>.99?.99:t,this.contentExceeds100percent()&&(this._fO2=this.countRemaining(this._fHe))}copy(){return new O(this._fO2,this._fHe)}mod(t){return G.mod(t,this._fO2)}end(t,e){return G.end(t,this.fN2,e?this._fO2:0)}mnd(t,e){return G.mnd(t,this.fN2,e?this._fO2:0)}ceiling(t){return G.ceiling(this._fO2,t)}compositionEquals(t){return!!t&&this._fO2===t._fO2&&this._fHe===t._fHe}contentCode(){return g.round(1e4*this._fO2*1e4)+g.round(1e4*this._fHe)}contentExceeds100percent(){return this._fO2+this._fHe>1}countRemaining(t){return g.round(1-t,5)}}class l{static nitroxNames(){return l.allNames().slice(0,6)}static allNames(){return Array.from(l.map.keys())}static nameFor(t,e=0){const r=g.round(100*t),n=g.round(100*e);return r<=0?"":n<=0?r>=100?l.oxygenName:21===r?l.airName:"EAN"+r.toString():`${r>=21?"Helitrox":"Trimix"} ${r.toString()}/${n.toString()}`}static byName(t){if(l.map.has(t))return l.map.get(t)??null;const e=l.namesRegEx.exec(t);if(e){if(e[1]){const s=Number(e[1])/100;if(s>0)return new O(s,0)}if(e[2]&&e[3]){const s=Number(e[2])/100,r=Number(e[3])/100;if(s>0&&r>0)return new O(s,r)}}return null}}l.o2InAir=.209,l.nitroxInAir=1-l.o2InAir,l.oxygen=new O(1,0),l.ean50=new O(.5,0),l.ean38=new O(.38,0),l.ean36=new O(.36,0),l.ean32=new O(.32,0),l.trimix3525=new O(.35,.25),l.trimix2525=new O(.25,.25),l.air=new O(l.o2InAir,0),l.trimix2135=new O(.21,.35),l.trimix1845=new O(.18,.45),l.trimix1555=new O(.15,.55),l.trimix1260=new O(.12,.6),l.trimix1070=new O(.1,.7),l.airName="Air",l.oxygenName="Oxygen",l.namesRegEx=/[EAN](?<fO2>\d{2})|(?<fO2b>\d{2})\/(?<fHe>\d{2})/i,l.map=new Map([[l.airName,l.air],["EAN32",l.ean32],["EAN36",l.ean36],["EAN38",l.ean38],["EAN50",l.ean50],[l.oxygenName,l.oxygen],["Helitrox 35/25",l.trimix3525],["Helitrox 25/25",l.trimix2525],["Helitrox 21/35",l.trimix2135],["Trimix 18/45",l.trimix1845],["Trimix 15/55",l.trimix1555],["Trimix 12/60",l.trimix1260],["Trimix 10/70",l.trimix1070]]);class Z extends m{constructor(t,e){super(t.n2HalfTime,t.n2A,t.n2B,t.heHalfTime,t.heA,t.heB),this._pN2=0,this._pHe=0,this._pTotal=0,this._a=0,this._b=0,this._pN2=G.partialPressure(e,.79)-.0627,this._pHe=0,this._pTotal=this.pN2+this.pHe}get pN2(){return this._pN2}get pHe(){return this._pHe}get pTotal(){return this._pTotal}get a(){return this._a}get b(){return this._b}copy(){const t=new Z(this,1);return t._pN2=this._pN2,t._pHe=this._pHe,t._pTotal=this._pTotal,t._a=this._a,t._b=this._b,t}ceiling(t){return(this.pTotal-this.a*t)/(t/this.b+1-t)}load(t,e){this._pN2=this.loadGas(t,e.fN2,this.pN2,this.n2HalfTime),this._pHe=this.loadGas(t,e.fHe,this.pHe,this.heHalfTime);const s=this.pTotal;return this._pTotal=this.pN2+this.pHe,this._a=(this.n2A*this.pN2+this.heA*this.pHe)/this.pTotal,this._b=(this.n2B*this.pN2+this.heB*this.pHe)/this.pTotal,this.pTotal-s}loadGas(t,e,s,r){return this.schreinerEquation(s,t.startPressure*e,t.duration,r,t.speed*e)}schreinerEquation(t,e,s,r,n){const h=.01155245301/r;return e+n*(s-1/h)-(e-t-n/h)*Math.exp(-h*s)}}class W{constructor(){this.compartments=[]}static createFromOther(t){const e=new W;return e.compartments=W.copy(t),e}static createFromSurfacePressure(t){const e=new W;for(let s=0;s<w.Buhlmann_ZHL16C.length;s++){const n=new Z(w.Buhlmann_ZHL16C[s],t);e.compartments.push(n)}return e}static copy(t){const e=[];for(let s=0;s<t.length;s++){const r=t[s].copy();e.push(r)}return e}ceiling(t){let e=0;for(let s=0;s<this.compartments.length;s++){const r=this.compartments[s].ceiling(t);r>e&&(e=r)}return e}load(t,e){let s=0;for(let r=0;r<this.compartments.length;r++)s+=this.compartments[r].load(t,e);return s}}class D{static toSeconds(t){return t*D.oneMinute}static toMinutes(t){return t/D.oneMinute}static toDate(t){return new Date(1970,1,1,0,0,t,0)}static secondsFromDate(t){const e=new Date(t);let s=e.getSeconds();return s+=e.getMinutes()*D.oneMinute,s+=e.getHours()*Math.pow(D.oneMinute,2),s}}D.oneSecond=1,D.oneMinute=60,D.oneDay=1440*D.oneMinute;class ${static validate(t,e){const s=[];if(!t.any()){const r=k.createError("There needs to be at least one segment at depth.");s.push(r)}return t.withAll(r=>{$.validateRegisteredGas(s,e,r)}),s}static validateRegisteredGas(t,e,s){if(!e.isRegistered(s.gas)){const n=k.createError(`Segment ${s.startDepth}-${s.endDepth} has gas not registered in gases.`);t.push(n)}}}class B{constructor(t,e,s,r){this.startDepth=t,this.endDepth=e,this._gas=s,this.duration=r}get gas(){return this._gas}get tank(){return this._tank}get speed(){return B.speed(this.startDepth,this.endDepth,this.duration)}get averageDepth(){return(this.startDepth+this.endDepth)/2}set tank(t){this._tank=t,t&&(this._gas=t.gas)}static from(t){const e=new B(t.startDepth,t.endDepth,t._gas,t.duration);return e.tank=t.tank,e}static speed(t,e,s){return(e-t)/s}static depthAt(t,e,s){return t+e*s}static timeAt(t,e,s){return Math.abs(s-t)/e}contentEquals(t){return this.speed===t.speed&&this._gas===t._gas}depthAt(t){return B.depthAt(this.startDepth,this.speed,t)}mergeFrom(t){this.duration+=t.duration,this.endDepth=t.endDepth}}class H{constructor(){this.segments=[],this._maxDepth=0}get startAscentIndex(){return this.deepestPart().length}get startAscentTime(){const t=this.deepestPart();return H.duration(t)}get length(){return this.segments.length}get items(){return this.segments.slice()}get maxDepth(){return this._maxDepth}get currentDepth(){return this.any()?this.last().endDepth:0}get duration(){return H.duration(this.segments)}static from(t){return H.fromCollection(t.segments)}static fromCollection(t){const e=new H;return t.forEach(s=>{const r=B.from(s);e.segments.push(r),e.updateMaxDepth(r)}),e}static duration(t){let e=0;for(const s of t)e+=s.duration;return e}static averageDepth(t){if(t.length<=0)return 0;let e=0,s=0;return t.forEach(r=>{if(r.duration>0){const n=r.averageDepth*r.duration+s*e;s+=r.duration,e=n/s}}),e}add(t,e,s,r){const n=new B(t,e,s,r);return this.segments.push(n),this.updateMaxDepth(n),n}addFlat(t,e,s){return this.add(t,t,e,s)}addChangeTo(t,e,s){return this.add(this.currentDepth,t,e,s)}mergeFlat(t=0){if(t<0)return this.items;const e=[];for(let s=this.segments.length-1;s>t;s--){const r=this.segments[s-1],n=this.segments[s];r.contentEquals(n)&&(r.mergeFrom(n),e.push(n))}return this.segments=this.segments.filter(s=>!e.includes(s)),this.items}remove(t){this.segments=this.segments.filter(e=>e!==t),this.fixStartDepths()}cutDown(t){this.segments=this.segments.slice(0,this.segments.length-t),this.fixStartDepths()}withAll(t){for(let e=0;e<this.segments.length;e++)t(this.segments[e])}any(){return 0!==this.segments.length}last(){return this.segments[this.segments.length-1]}copy(){return H.from(this)}fixStartDepths(){this.any()&&(this.segments[0].startDepth=0);for(let t=0;t<this.segments.length-1;t++){const s=this.segments[t+1];s.startDepth=this.segments[t].endDepth,this.updateMaxDepth(s)}}deepestPart(){for(let t=this.segments.length-1;t>=0;t--)if(this.segments[t].endDepth===this.maxDepth)return this.items.slice(0,t+1);return[]}updateMaxDepth(t){t.endDepth>this._maxDepth&&(this._maxDepth=t.endDepth)}}class ut{constructor(t,e,s){this.depthConverter=t,this.options=e,this.tissues=s,this.lowestCeiling=0,this.lowestCeiling=this.depthConverter.surfacePressure+1}ceiling(){let t=this.tolerated();return t<this.depthConverter.surfacePressure&&(t=this.depthConverter.surfacePressure),this.depthConverter.fromBar(t)}toleratedTissues(t,e,s,r){const n=this.tissues.compartments;let a=0;for(let h=0;h<n.length;h++){const d=n[h];let S=a;(t/d.b+d.a-t)*s+t<(e/d.b+d.a-e)*r+e&&(S=(-d.a*d.b*(s*e-r*t)-(1-d.b)*(s-r)*e*t+d.b*(e-t)*d.pTotal)/(-d.a*d.b*(s-r)+(1-d.b)*(r*e-s*t)+d.b*(e-t))),S>=a&&(a=S)}return a}tolerated(){const t=this.options.gfLow,e=this.options.gfHigh,s=this.depthConverter.surfacePressure,r=this.tissues.ceiling(t);return r>this.lowestCeiling&&(this.lowestCeiling=r),this.toleratedTissues(s,this.lowestCeiling,e,t)}}let st=(()=>{class i{constructor(e){this.options=e,this.averageDepth=0}markAverageDepth(e){const s=e.deepestPart();this.averageDepth=H.averageDepth(s)}ascent(e){return e>i.sixMeters?e>this.averageDepth/2?this.options.ascentSpeed50perc:this.options.ascentSpeed50percTo6m:this.options.ascentSpeed6m}}return i.sixMeters=6,i})(),rt=(()=>{class i{constructor(){}search(e){if(e.maxValue<e.initialValue)throw Error("Max value cant be smaller than initial value");if(e.estimationStep>e.maxValue-e.initialValue)throw Error("Step cant be larger than range");const s=this.findInitialLimit(e);return this.searchInsideInterval(e,s)}searchInsideInterval(e,s){for(;s.right-s.left>i.minimalStep;){let r=s.left+(s.right-s.left)/2;r=Math.round(r),e.doWork(r),e.meetsCondition()?s.left=r:s.right=r}return s.left}findInitialLimit(e){let s=e.initialValue;for(e.doWork(s);e.meetsCondition()&&s<=e.maxValue;)s+=e.estimationStep,e.doWork(s);let r=s-e.estimationStep;return r=r<e.initialValue?e.initialValue:r,{left:r,right:s>e.maxValue?e.maxValue:s}}}return i.minimalStep=1,i})();class nt{constructor(t,e,s,r){this.gases=t,this.segments=e,this.options=s,this.depthConverter=r,this.ceilings=[],this.runTime=0,this.tissues=W.createFromSurfacePressure(r.surfacePressure),this.gradients=new ut(r,s,this.tissues);const n=e.last();this.currentGas=n.gas,this.bestGasOptions={currentDepth:this.currentDepth,maxDecoPpO2:this.options.maxDecoPpO2,oxygenNarcotic:this.options.oxygenNarcotic,maxEnd:this.options.maxEND,currentGas:this.currentGas},this.speeds=new st(this.options),this.levels=new F(r,s),this.gasSource=new ht(t,s)}get ascentSpeed(){return this.speeds.ascent(this.currentDepth)}get currentDepth(){return this.segments.currentDepth}get ambientPressure(){return this.depthConverter.toBar(this.currentDepth)}get addSafetyStop(){return this.levels.addSafetyStop(this.currentDepth,this.segments.maxDepth)}get decoStopDuration(){return this.options.roundStopsToMinutes?D.oneMinute:D.oneSecond}get isAtSurface(){return 0===this.segments.last().endDepth}markAverageDepth(){this.speeds.markAverageDepth(this.segments)}addCeiling(){const t=this.ceiling(),e=new ot(this.runTime,t);this.ceilings.push(e)}ceiling(){return this.gradients.ceiling()}bestDecoGas(){return this.bestGasOptions.currentDepth=this.currentDepth,this.bestGasOptions.currentGas=this.currentGas,this.gasSource.bestGas(this.bestGasOptions)}createMemento(){return{runTime:this.runTime,tissues:W.copy(this.tissues.compartments),ceilings:this.ceilings.length,segments:this.segments.length,lowestCeiling:this.gradients.lowestCeiling}}restore(t){this.tissues.compartments=W.copy(t.tissues),this.gradients.lowestCeiling=t.lowestCeiling,this.runTime=t.runTime,this.ceilings=this.ceilings.slice(0,t.ceilings),this.segments.cutDown(this.segments.length-t.segments)}nextStop(t){return this.levels.nextStop(t)}shouldSwitchTo(t){return t&&!this.currentGas.compositionEquals(t)}addGasSwitchSegment(){return this.addStopSegment(this.options.gasSwitchDuration*D.oneMinute)}addDecoStopSegment(){return this.addStopSegment(0)}addSafetyStopSegment(){return this.addStopSegment(3*D.oneMinute)}addAscentSegment(t,e){return this.segments.add(this.currentDepth,t,this.currentGas,e)}addStopSegment(t){return this.segments.add(this.currentDepth,this.currentDepth,this.currentGas,t)}}class U{noDecoLimit(t,e,s){const r=new z;r.add(e);const n=new H,a=this.duration(t,s.descentSpeed);return n.add(0,t,e,a),this.noDecoLimitMultiLevel(n,r,s)}noDecoLimitMultiLevel(t,e,s){const r=new N(s).create(),n=new nt(e,t,s,r);return this.swimNoDecoLimit(t,e,n,s)}calculateDecompression(t,e,s){const r=new N(t).create(),n=s.copy(),a=this.validate(n,e,t,r);if(a.length>0){const P=n.mergeFlat(s.length);return V.fromErrors(P,a)}const h=new nt(e,n,t,r);this.swimPlan(h),h.markAverageDepth();let d=h.nextStop(h.currentDepth);for(;d>=0&&!h.isAtSurface;)this.tryGasSwitch(h),this.stayAtDecoStop(h,d),this.stayAtSafetyStop(h),this.ascentToNextStop(h,d),d=h.nextStop(d);const S=h.segments.mergeFlat(s.length);return V.fromProfile(S,h.ceilings)}tryGasSwitch(t){const e=t.bestDecoGas();if(t.shouldSwitchTo(e)){t.currentGas=e;const s=t.addGasSwitchSegment();this.swim(t,s)}}stayAtDecoStop(t,e){if(this.needsDecoStop(t,e)){const s=t.createMemento(),r={estimationStep:20*D.oneMinute,initialValue:0,maxValue:D.oneDay,doWork:d=>this.swimDecoStop(t,s,d),meetsCondition:()=>this.needsDecoStop(t,e)},a=(new rt).search(r)+D.oneSecond,h=g.ceilDistance(a,t.decoStopDuration);this.swimDecoStop(t,s,h)}}swimDecoStop(t,e,s){t.restore(e);const r=t.addDecoStopSegment();r.duration=s,this.swim(t,r)}needsDecoStop(t,e){if(e>=t.ceiling())return!1;const s=t.createMemento();this.ascentToNextStop(t,e);const r=e<t.ceiling();return t.restore(s),r}stayAtSafetyStop(t){if(t.addSafetyStop){const e=t.addSafetyStopSegment();this.swim(t,e)}}ascentToNextStop(t,e){const r=this.duration(t.currentDepth-e,t.ascentSpeed),n=t.addAscentSegment(e,r);this.swim(t,n)}validate(t,e,s,r){const n=$.validate(t,e);if(n.length>0)return n;const a=ct.validate(e,s,r.surfacePressure);return a.length>0?a:[]}duration(t,e){return t/D.toMinutes(e)}swimPlan(t){t.addCeiling(),t.segments.withAll(e=>{this.swim(t,e)})}swim(t,e){let s=e.startDepth;const r=D.oneSecond;for(let n=0;n<e.duration;n+=r){const a=B.depthAt(s,e.speed,r),h=new B(s,a,e.gas,r);this.swimPart(t,h),s=h.endDepth}}swimPart(t,e){const s=this.toLoadSegment(t.depthConverter,e);t.tissues.load(s,e.gas),t.runTime+=e.duration,t.addCeiling()}swimNoDecoLimit(t,e,s,r){if(this.validate(t,e,r,s.depthConverter).length>0)return 0;this.swimPlan(s);const a=this.currentNdl(s.ceilings);return a!==Number.POSITIVE_INFINITY?a:this.predictNoDecoLimit(t,s)}predictNoDecoLimit(t,e){const s=t.last(),r=s.endDepth,n=new B(r,r,s.gas,D.oneMinute),a=this.toLoadSegment(e.depthConverter,n);let h=1;for(;e.ceiling()<=0&&h>0;)h=e.tissues.load(a,s.gas),e.runTime+=D.oneMinute;return 0===h||0===r?Number.POSITIVE_INFINITY:this.floorNdl(e.runTime)}floorNdl(t){let e=D.toMinutes(t);return e=g.floor(e),e-1}currentNdl(t){for(let e=0;e<t.length;e+=D.oneMinute){const s=t[e];if(s.notAtSurface)return this.floorNdl(s.time)}return Number.POSITIVE_INFINITY}toLoadSegment(t,e){const s=t.toBar(e.speed)-t.surfacePressure;return{startPressure:t.toBar(e.startDepth),duration:e.duration,speed:s}}}class Q{static haveReserve(t){for(let e=0;e<t.length;e++)if(!t[e].hasReserve)return!1;return!0}static resetConsumption(t){t.forEach(e=>{e.consumed=0,e.reserve=0})}static removeTank(t,e){const s=t.filter(r=>r!==e);return Q.renumberIds(s),s}static renumberIds(t){for(let e=0;e<t.length;e++)t[e].id=e+1}}class X{constructor(t,e,s){this.size=t,this.startPressure=e,this.id=0,this.consumed=0,this.reserve=0,this._gas=l.air.copy(),this.o2=s}get gas(){return this._gas}get o2(){return _.getO2(this.gas.fO2,this.gas.fHe)}get he(){return g.roundTwoDecimals(100*this.gas.fHe)}get volume(){return this.size*this.startPressure}get name(){return this._gas.name}get endPressure(){const t=this.startPressure-this.consumed;return t>0?t:0}get percentsRemaining(){return this.endPressure/this.startPressure*100}get percentsReserve(){const t=this.reserve/this.startPressure*100;return t>100?100:t}get hasReserve(){return this.endPressure>=this.reserve}set o2(t){this._gas.fO2=_.setO2(t,this.gas.fHe)}set he(t){this.gas.fHe=t/100}static createDefault(){return new X(15,200,100*l.o2InAir)}assignStandardGas(t){const e=l.byName(t);e&&(this._gas.fO2=e.fO2,this._gas.fHe=e.fHe)}loadFrom(t){this.size=t.size,this.startPressure=t.startPressure,this.consumed=t.consumed,this.reserve=t.reserve,this.gas.fO2=t._gas.fO2,this.gas.fHe=t._gas.fHe}}class _{static getO2(t,e){const s=100*t;return this.isInAirRange(s,e)?_.pinnedO2:g.roundTwoDecimals(s)}static setO2(t,e){return this.isInAirRange(t,e)?l.o2InAir:t/100}static isInAirRange(t,e){return _.o2InAirPercent<=t&&t<=_.pinnedO2&&0===e}}_.pinnedO2=21,_.o2InAirPercent=100*l.o2InAir;class q{constructor(t,e,s,r){this.duration=t,this.startTime=0,this.endTime=0,this.averageDepth=0,this._startDepth=0,this._endDepth=0,this.endTime=g.roundTwoDecimals(t),this._endDepth=e,this._startDepth=s,this.averageDepth=r}get startDepth(){return this._startDepth}get endDepth(){return this._endDepth}static fromSegment(t){return new q(t.duration,t.endDepth,t.startDepth,t.averageDepth)}}let dt=(()=>{class i{constructor(e){this.depthConverter=e}static calculateDecompression(e,s,r){const n=z.fromTanks(s),a=new U,h=e.copy();return a.calculateDecompression(r,n,h)}consumeFromTanks(e,s,r,n){if(e.length<2)throw new Error("Profile needs to contain at least 2 segments.");const a=this.emergencyAscent(e,s,r);this.consumeFromTanks2(e,a,s,r,n)}consumeFromTanks2(e,s,r,n,a){if(e.length<2)throw new Error("Profile needs to contain at least 2 segments.");Q.resetConsumption(n);const h=this.consumeByTanks(e,a.rmv);this.consumeByGases(e,n,a.rmv,h),this.updateReserve(s,n,a.stressRmv)}emergencyAscent(e,s,r){const a=H.fromCollection(e).deepestPart(),h=H.fromCollection(a),d=z.fromTanks(r),E=(new U).calculateDecompression(s,d,h).segments,I=E.slice(a.length,E.length);return this.addSolvingSegment(I,s.problemSolvingDuration),I}calculateMaxBottomTime(e,s,r,n){const a=this.createTestProfile(e),h=a.last(),d={estimationStep:40*D.oneMinute,initialValue:0,maxValue:D.oneDay,doWork:I=>{h.duration=I,this.consumeFromProfile(a,s,r,n)},meetsCondition:()=>Q.haveReserve(s)},P=(new rt).search(d);if(0===P)return 0;const E=D.toMinutes(e.duration+P);return g.floor(E)}consumeFromProfile(e,s,r,n){const a=i.calculateDecompression(e,s,n);this.consumeFromTanks(a.segments,n,s,r)}createTestProfile(e){const s=e.copy(),r=e.last();return s.addFlat(r.endDepth,r.gas,0),s}updateReserve(e,s,r){const n=this.toBeConsumed(e,r,a=>!0);for(let a=0;a<=s.length-1;a++){const h=s[a],d=h.gas.contentCode();let S=n.get(d)||0;S=this.addReserveToTank(h,S),n.set(d,S)}s[0].reserve<i.minimumRockBottom&&(s[0].reserve=i.minimumRockBottom)}addReserveToTank(e,s){const r=g.ceil(s/e.size),n=r+e.reserve>e.startPressure?e.startPressure-e.reserve:r;return e.reserve+=n,this.extractRemaining(s,n,e.size)}addSolvingSegment(e,s){if(0===e.length)return;const n=e[0].startDepth,a=new B(n,n,e[0].gas,s*D.oneMinute);e.unshift(a)}consumeByGases(e,s,r,n){const a=this.toBeConsumedYet(e,r,n,h=>!h.tank);for(let h=s.length-1;h>=0;h--){const d=s[h],S=d.gas.contentCode();let P=a.get(S)||0;P=this.consumeFromTank(d,P),a.set(S,P)}}consumeByTanks(e,s){const r=new Map,n=D.toMinutes(s);return e.forEach(a=>{if(a.tank){const h=a.tank,d=a.gas.contentCode(),S=q.fromSegment(a),P=this.consumedBySegment(S,n),E=this.consumeFromTank(h,P);let I=r.get(d)||0;I+=E,r.set(d,I)}}),r}consumeFromTank(e,s){const r=g.ceil(s/e.size),n=r>e.endPressure?e.endPressure:r;return e.consumed+=n,this.extractRemaining(s,n,e.size)}extractRemaining(e,s,r){return(e-=s*r)<0?0:e}toBeConsumed(e,s,r){return this.toBeConsumedYet(e,s,new Map,r)}toBeConsumedYet(e,s,r,n){const a=D.toMinutes(s);for(let h=0;h<e.length;h++){const d=e[h];if(n(d)){const P=d.gas.contentCode(),E=q.fromSegment(d),I=this.consumedBySegment(E,a);let at=r.get(P)||0;at+=I,r.set(P,at)}}return r}consumedBySegment(e,s){const r=this.depthConverter.toBar(e.averageDepth);return e.duration*r*s}}return i.minimumRockBottom=30,i})();class pt{constructor(t){this.depthConverter=t,this.minimumPpO2=.5}calculateForProfile(t){let e=0;return t.forEach(s=>{const n=this.calculate(s.gas.fO2,s.startDepth,s.endDepth,s.duration);e+=n}),e}calculate(t,e,s,r){const h=t*this.depthConverter.toBar((e+s)/2);if(h<=this.minimumPpO2)return 0;const d=this.exponentByPpO2(h);return r*Math.exp(d)}exponentByPpO2(t){return t<=1.5?1.93873*t-11.7853:9.80829*t-23.6349}}class b{get name(){return"Imperial"}get lengthShortcut(){return"ft"}get pressureShortcut(){return"psi"}get volumeShortcut(){return"cuft"}get altitudeShortcut(){return"ft.a.s.l"}get densityShortcut(){return"lb/cuft"}toMeters(t){return t*b.footRate}fromMeters(t){return t/b.footRate}toBar(t){return t/b.psiRate}fromBar(t){return t*b.psiRate}toLiter(t){return t*b.cftRate}fromLiter(t){return t/b.cftRate}fromTankLiters(t,e){return this.fromLiter(t)*e}toTankLiters(t,e){return this.toLiter(t)/e}fromGramPerLiter(t){return t*b.lbPerCuftRate}}b.psiRate=14.503773773022,b.cftRate=28.316846592,b.footRate=.3048,b.poundRate=.00220462262,b.lbPerCuftRate=b.poundRate*b.cftRate;class A{static fromImperial(t){const s=(new b).toBar(t);return g.round(s,3)}}A.imperialTankSize=124.1,A.imperialTankWorkPressure=3442,A.imperialStageSize=80.1,A.imperialStageWorkPressure=3e3,A.mertricTankSize=15,A.metricStageSize=11.1,A.metricTankWorkPressure=A.fromImperial(A.imperialTankWorkPressure),A.metricStageWorkPressure=A.fromImperial(A.imperialStageWorkPressure);class y{get primaryTankSize(){return A.imperialTankSize}get primaryTankWorkPressure(){return A.imperialTankWorkPressure}get stageTankSize(){return A.imperialStageSize}get stageTankWorkPressure(){return A.imperialStageWorkPressure}get lastSpeedLevel(){return 20}get autoStopLevel(){return 33}get stopsDistance(){return y.depthDistance}get recreationalOptions(){return{ascentSpeed50perc:y.recreSpeed,ascentSpeed50percTo6m:y.recreSpeed,ascentSpeed6m:y.recreSpeed,descentSpeed:y.descentSpeed,lastStopDepth:y.lastStopDepth,maxEND:y.maxEnd}}get recommendedOptions(){return{ascentSpeed50perc:y.recreSpeed,ascentSpeed50percTo6m:2*y.depthDistance,ascentSpeed6m:y.depthDistance,descentSpeed:y.descentSpeed,lastStopDepth:y.depthDistance,maxEND:y.maxEnd}}}y.lastStopDepth=15,y.depthDistance=10,y.descentSpeed=6*y.depthDistance,y.recreSpeed=3*y.depthDistance,y.maxEnd=10*y.depthDistance;let lt=(()=>{class i{constructor(e=i.defaultSac,s=c.maxPpO2){this.rmv=e,this.maxPpO2=s,this.maxDecoPpO2=c.maxDecoPpO2}get stressRmv(){return 3*this.rmv}static gasSac(e,s){return e/s}gasSac(e){return i.gasSac(this.rmv,e.size)}loadFrom(e){this.rmv=e.rmv,this.maxPpO2=e.maxPpO2,this.maxDecoPpO2=e.maxDecoPpO2}}return i.defaultSac=20,i})();class Y{constructor(t,e,s){this.gas=t,this.depth=e,this.density=s}static createDefault(){return new Y(l.air,0,0)}applyHigher(t,e,s){s>this.density&&(this.gas=t,this.density=s,this.depth=e)}}let mt=(()=>{class i{constructor(){this.helium=.179,this.nitrogen=1.251,this.oxygen=1.428}forGas(e){return this.forContent(e.fO2,e.fHe)}forContent(e,s){return this.nitrogen*(1-e-s)+this.oxygen*e+this.helium*s}}return i.recommendedMaximum=5.7,i})();class it{constructor(t){this.depthConverter=t,this.density=new mt}forProfile(t){const e=Y.createDefault();return t.forEach(s=>{const r=s.gas,n=this.density.forGas(r);this.applyHigher(e,r,s.startDepth,n),this.applyHigher(e,r,s.endDepth,n)}),e}atDepth(t,e){const s=this.density.forGas(t);return this.fromAtaDensity(s,e)}applyHigher(t,e,s,r){const n=this.fromAtaDensity(r,s);t.applyHigher(e,s,n)}fromAtaDensity(t,e){return t*this.depthConverter.toBar(e)}}let gt=(()=>{class i{constructor(e){this.depthConverter=e,this.minPressure=.5}calculateForProfile(e){let s=0;return e.forEach(r=>{const a=this.calculate(r.duration,r.gas.fO2,r.startDepth,r.endDepth);s+=a}),s}calculate(e,s,r,n){let a=D.toMinutes(e),S=this.depthConverter.toBar(r)*s,P=this.depthConverter.toBar(n)*s;if(S<=this.minPressure&&P<=this.minPressure)return 0;S<=this.minPressure?(a=a*(P-this.minPressure)/(P-S),S=.501):P<=this.minPressure&&(a=a*(S-this.minPressure)/(S-P),P=.501);const E=S+P-1;return Math.pow(E,5/6)*(1-5*Math.pow(P-S,2)/216/Math.pow(E,2))*a}}return i.dailyLimit=300,i})();class ft{constructor(t,e,s){this.startDepth=t,this.endDepth=e,this.duration=s}get minDepth(){return Math.min(this.startDepth,this.endDepth)}get maxDepth(){return Math.max(this.startDepth,this.endDepth)}get isDescent(){return this.startDepth<this.endDepth}get isFlat(){return this.startDepth===this.endDepth}get isAscent(){return this.startDepth>this.endDepth}timeAt(t){const e=B.speed(this.startDepth,this.endDepth,this.duration),s=B.timeAt(this.startDepth,e,t);return g.round(s)}}class Dt{constructor(t){this.simpleDepths=C.simple(),this.events=new tt,this.elapsed=0,this.index=0,this.fixedMnd=!0,this._mndBars=0,this.profile=t.profile,this.options=t.profileOptions,this.startAscentIndex=t.startAscentIndex,this.maxDensity=t.maxDensity,this.exactDepths=new N(this.options).create(),this.densityAtDepth=new it(this.exactDepths),this.speeds=new st(this.options);const e=H.fromCollection(this.profile);this.speeds.markAverageDepth(e),this._mndBars=this.simpleDepths.toBar(this.options.maxEND)}get previous(){return this.index>0?this.profile[this.index-1]:null}get isBeforeDecoAscent(){return this.index<this.startAscentIndex}get maxPpo(){return this.isBeforeDecoAscent?this.options.maxPpO2:this.options.maxDecoPpO2}get current(){return this.profile[this.index]}get switchingGas(){return!!this.previous&&!this.current.gas.compositionEquals(this.previous.gas)}get switchingTank(){return!!this.previous&&!!this.previous.tank&&!!this.current.tank&&this.previous.tank!==this.current.tank}get maxMnd(){return this._mndBars}get currentEndTime(){return this.elapsed+this.current.duration}gasEnd(t){return this.current.gas.end(t,this.options.oxygenNarcotic)}addElapsed(){this.elapsed=this.currentEndTime}}class j{static fromProfile(t){const e=new Dt(t),s=new St(e.events);for(e.index=0;e.index<t.profile.length;e.index++){const r=this.toPressureSegment(e.current,e.simpleDepths);this.addHighPpO2(e,r),this.addLowPpO2(e,r),this.addGasSwitch(e),this.addUserTankSwitch(e),this.addHighDescentSpeed(e),this.addHighAscentSpeed(e),this.addSwitchHighN2(e),this.addMndExceeded(e,r),this.addDensityExceeded(e),s.assignSegment(e.current),j.addBrokenCeiling(s,t.ceilings,e.current),e.addElapsed()}return e.events}static addHighAscentSpeed(t){const e=t.current;let s=D.toSeconds(e.speed);if(s=g.roundTwoDecimals(s),-s>t.speeds.ascent(e.startDepth)){const r=k.createHighAscentSpeed(t.elapsed,e.startDepth);t.events.add(r)}}static addHighDescentSpeed(t){const e=t.current;if(D.toSeconds(e.speed)>t.options.descentSpeed){const r=k.createHighDescentSpeed(t.elapsed,e.startDepth);t.events.add(r)}}static addGasSwitch(t){if(t.switchingGas){const e=t.current,s=k.createGasSwitch(t.elapsed,e.startDepth,e.gas);t.events.add(s)}}static addUserTankSwitch(t){if(t.switchingTank){const e=t.current,s=k.createGasSwitch(t.elapsed,e.startDepth,e.gas);t.events.add(s)}}static toPressureSegment(t,e){const s=e.toBar(t.startDepth),r=e.toBar(t.endDepth);return new ft(s,r,t.duration)}static addHighPpO2(t,e){if(e.isDescent||t.isBeforeDecoAscent&&t.switchingGas){const s=t.current.gas.mod(t.maxPpo);if(e.maxDepth>s){let r=e.startDepth,n=t.elapsed;e.startDepth<s&&(r=s,n+=e.timeAt(r));const a=t.simpleDepths.fromBar(r),h=k.createHighPpO2(n,a);t.events.add(h)}}}static addLowPpO2(t,e){const s=t.current.gas.ceiling(t.simpleDepths.surfacePressure);if(e.minDepth<s&&t.switchingGas||e.startDepth>s&&s>e.endDepth&&e.isAscent||0===t.current.startDepth&&e.startDepth<s&&e.isDescent){let n=e.startDepth,a=t.elapsed;e.startDepth>s&&(n=s,a+=e.timeAt(n));const h=t.simpleDepths.fromBar(n),d=k.createLowPpO2(a,h);t.events.add(d)}}static addBrokenCeiling(t,e,s){for(;t.lastCeilingIndex<t.currentSegmentEndTime&&t.lastCeilingIndex<e.length-1;){const r=e[t.lastCeilingIndex];t.lastCeilingIndex++;const n=t.belowCeiling(r,s);if(!n&&t.fixedBrokenCeiling){const a=k.createBrokenCeiling(r.time,r.depth);t.events.add(a),t.fixedBrokenCeiling=!1;break}if(n&&!t.fixedBrokenCeiling&&(t.fixedBrokenCeiling=!0),r.time>t.currentSegmentEndTime)break}}static addSwitchHighN2(t){const e=t.current,s=t.previous;if(t.switchingGas&&s&&s.gas.fHe>0&&5*(e.gas.fN2-s.gas.fN2)>-(e.gas.fHe-s.gas.fHe)){const a=k.createSwitchToHigherN2(t.elapsed,e.startDepth,e.gas);t.events.add(a)}}static addMndExceeded(t,e){const s=t.current,r=t.gasEnd(e.startDepth);t.maxMnd<r&&t.fixedMnd&&this.addMndEvent(t,t.elapsed,s.startDepth);const n=t.gasEnd(e.endDepth);t.maxMnd<n&&t.fixedMnd&&this.addMndEvent(t,t.elapsed+s.duration,s.endDepth),t.fixedMnd=n<=t.maxMnd}static addMndEvent(t,e,s){const n=k.createMaxEndExceeded(e,s,t.current.gas);t.events.add(n),t.fixedMnd=!0}static addDensityExceeded(t){const e=t.current,s=e.gas,n=e.endDepth,a=e.endDepth>e.startDepth,h=t.switchingGas,d=t.densityAtDepth.atDepth(s,e.startDepth),S=t.densityAtDepth.atDepth(s,n);if(h&&d>t.maxDensity){const P=k.createHighDensity(t.elapsed,e.startDepth,e.gas);t.events.add(P)}else if(a&&S>t.maxDensity){const E=k.createHighDensity(t.elapsed+e.duration,e.endDepth,e.gas);t.events.add(E)}}}class St{constructor(t){this.events=t,this.lastCeilingIndex=0,this.currentSegmentStartTime=0,this.currentSegmentEndTime=0,this.fixedBrokenCeiling=!0}assignSegment(t){this.currentSegmentStartTime=this.currentSegmentEndTime,this.currentSegmentEndTime=this.currentSegmentStartTime+t.duration}belowCeiling(t,e){return e.depthAt(t.time-this.currentSegmentStartTime)>=t.depth}}}}]);